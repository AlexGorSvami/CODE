from datetime import date, datetime
#Конструктор типа date сначала принимает год, затем месяц и день.
# Мы также можем использовать именованные аргументы нарушая их порядок date(day=6, month=2, year=1991)
my_date = date(1991, 11, 6)
print(my_date)
print(type(my_date))

print(my_date.year)
print(my_date.day)

print(date.today())

print(my_date.weekday())

print(date.min)
print(date.max)

print(date.fromordinal(365)) # Дата соответствующая номеру дня 365
print(date(1999, 12, 26).toordinal()) # Номер дня, соотвутствующий дате 1999-12-26


print('------------------------- time -----------------------------')
from datetime import time 
#Конструктор типа time сначала принимает часы, затем минуты, секунды, а уже потом микросекунды. 
# Мы можем использовать именованные аргументы (hour, minute, second, microsecond), нарушая указанный порядок. 
#Конструктор типа time сначала принимает часы, затем минуты, секунды, а уже потом микросекунды. Мы можем 
# использовать именованные аргументы (hour, minute, second, microsecond), нарушая указанный порядок. 
my_time = time(8, 30, 32, 1234)
print(my_time)
print(type(my_time))

print(time(11, 20, 23, 1200))
print(time(11))
print(time())

print('Hours = ', my_time.hour)
print('seconds = ', my_time.second)

#По сути мы наблюдаем результат работы функции str(), которая вызывается за кулисами и преобразует указанные объекты в читаемый для человека вид.
print(str(my_date))
print(str(my_time))

# Встроенная функция repr() возвращает объект в формальном (понятном интерпретатору) строковом представлении.

print(repr(my_date))
print(repr(my_time))

# Для встроенных типов данных при печати одиночного значения объекта явно вызывать функцию str() не требуется, однако при печати списка таких объектов это требуется.

dates = [date(2021, 12, 31), date(2019, 10, 6), date(2022, 11, 8)]   # список дат

print(dates)

# Оба типа данных date и time являются неизменяемыми. Мы можем создать множества, содержащие объекты данных типов (date и time), а также они могут выступать в качестве ключей словаря.
# Мы можем использовать встроенные функции min(), max(), sorted() и т.д. при работе с типами данных date и time.

# Для создания новой даты на основании уже существующей можно использовать встроенный метод replace(). Он возвращает новую дату с переданными измененными значениями свойств year, month, day.

date1 = date(1991, 10, 2)
date2 = date1.replace(year=2020)
print(date1)
print(date2)

# Для создания новой даты на основании уже существующей можно использовать встроенный метод replace(). Он возвращает новую дату с переданными измененными значениями свойств year, month, day.
